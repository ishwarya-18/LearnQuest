{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mjeyl/OneDrive/Documents/LearnQuest/frontend/src/components/AITutorAssistant.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\r\nimport { toast } from \"sonner\"\r\nimport {\r\n  Speech,\r\n  MessageSquare,\r\n  Brain,\r\n  Languages,\r\n  GraduationCap,\r\n  MessageCircleMore,\r\n  MessageCirclePlus,\r\n  MessageSquareText,\r\n  CircleQuestionMark,\r\n  MessageCircleOff,\r\n} from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n\r\n  \r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Switch } from \"@/components/ui/switch\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\"\r\n\r\ntype MessageRole = \"assistant\" | \"user\" | \"system\"\r\ntype Message = {\r\n  id: string\r\n  role: MessageRole\r\n  content: string\r\n  timestamp: number\r\n  language: string\r\n  meta?: {\r\n    tts?: boolean\r\n    topic?: string\r\n  }\r\n}\r\n\r\ntype ProgressData = {\r\n  weakAreas?: string[]\r\n  strengths?: string[]\r\n  recentScores?: Record<string, number>\r\n  level?: \"beginner\" | \"intermediate\" | \"advanced\"\r\n}\r\n\r\ntype Conversation = {\r\n  id: string\r\n  title: string\r\n  lastUpdated: number\r\n  language: string\r\n  messages: Message[]\r\n}\r\n\r\nexport type AITutorAssistantProps = {\r\n  className?: string\r\n  studentName?: string\r\n  locale?: string\r\n  initialLanguage?: string\r\n  progress?: ProgressData\r\n  presetTopics?: { id: string; label: string; prompt: string; icon?: \"coach\" | \"emergency\" | \"practice\" | \"concept\" }[]\r\n  onSendMessage?: (message: Message, conversation: Conversation) => void\r\n  onNewConversation?: (conversation: Conversation) => void\r\n  ttsEnabledByDefault?: boolean\r\n}\r\n\r\nconst STORAGE_KEY = \"learnquest.aiTutor.conversations.v1\"\r\nconst ACTIVE_KEY = \"learnquest.aiTutor.activeId.v1\"\r\n\r\nconst DEFAULT_PRESETS: AITutorAssistantProps[\"presetTopics\"] = [\r\n  { id: \"concept-help\", label: \"Explain a concept\", prompt: \"Explain like I'm 12: \", icon: \"concept\" },\r\n  { id: \"targeted-practice\", label: \"Targeted practice\", prompt: \"Give me 5 practice questions on: \", icon: \"practice\" },\r\n  { id: \"motivation\", label: \"Motivation boost\", prompt: \"I need motivation about studying: \", icon: \"coach\" },\r\n  { id: \"exam-crisis\", label: \"Emergency study help\", prompt: \"I have a test soon. Help me quickly with: \", icon: \"emergency\" },\r\n]\r\n\r\nconst LANG_OPTIONS = [\r\n  { value: \"en\", label: \"English\" },\r\n  { value: \"hi\", label: \"हिन्दी\" },\r\n  { value: \"bn\", label: \"বাংলা\" },\r\n  { value: \"te\", label: \"తెలుగు\" },\r\n  { value: \"ta\", label: \"தமிழ்\" },\r\n  { value: \"mr\", label: \"मराठी\" },\r\n  { value: \"kn\", label: \"ಕನ್ನಡ\" },\r\n  { value: \"pa\", label: \"ਪੰਜਾਬੀ\" },\r\n  { value: \"gu\", label: \"ગુજરાતી\" },\r\n  { value: \"ur\", label: \"اردو\" },\r\n]\r\n\r\nfunction generateId(prefix = \"msg\") {\r\n  return `${prefix}_${Math.random().toString(36).slice(2, 10)}_${Date.now().toString(36)}`\r\n}\r\n\r\nfunction now() {\r\n  return Date.now()\r\n}\r\n\r\nfunction safeLocalStorageGet<T>(key: string, fallback: T): T {\r\n  if (typeof window === \"undefined\") return fallback\r\n  try {\r\n    const raw = window.localStorage.getItem(key)\r\n    return raw ? (JSON.parse(raw) as T) : fallback\r\n  } catch {\r\n    return fallback\r\n  }\r\n}\r\n\r\nfunction safeLocalStorageSet<T>(key: string, value: T) {\r\n  if (typeof window === \"undefined\") return\r\n  try {\r\n    window.localStorage.setItem(key, JSON.stringify(value))\r\n  } catch {\r\n    // ignore\r\n  }\r\n}\r\n\r\nfunction speak(text: string, lang: string) {\r\n  if (typeof window === \"undefined\") return\r\n  const synth = window.speechSynthesis\r\n  if (!synth) return\r\n  const utter = new SpeechSynthesisUtterance(text)\r\n  utter.lang = lang\r\n  // Attempt to pick a matching voice\r\n  const voices = synth.getVoices()\r\n  const match = voices.find((v) => v.lang?.toLowerCase().startsWith(lang.toLowerCase()))\r\n  if (match) utter.voice = match\r\n  synth.speak(utter)\r\n}\r\n\r\nfunction stopSpeaking() {\r\n  if (typeof window === \"undefined\") return\r\n  const synth = window.speechSynthesis\r\n  if (synth && synth.speaking) synth.cancel()\r\n}\r\n\r\n// Very lightweight mock \"AI\" to simulate helpful responses and adaptive questioning without calling APIs.\r\nfunction mockTutorResponse(input: string, context: { progress?: ProgressData; language: string }): { text: string; followUps: string[] } {\r\n  const weak = context.progress?.weakAreas ?? []\r\n  const level = context.progress?.level ?? \"beginner\"\r\n  const lower = input.toLowerCase()\r\n  let base = \"\"\r\n\r\n  if (lower.includes(\"motivation\") || lower.includes(\"motivate\")) {\r\n    base =\r\n      \"You've got this! Let's set a tiny goal for the next 10 minutes. Pick one small topic and I'll guide you. Small steps build big progress.\"\r\n  } else if (lower.includes(\"test\") || lower.includes(\"exam\") || lower.includes(\"emergency\")) {\r\n    base =\r\n      \"Okay, rapid support mode. We'll prioritize high-yield points and a quick check of your understanding. Tell me the exact topic and the test date.\"\r\n  } else if (lower.includes(\"practice\")) {\r\n    base =\r\n      \"Here's a short, focused practice set. Try each question out loud first. I’ll adapt difficulty based on your answers.\"\r\n  } else if (weak.some((w) => lower.includes(w.toLowerCase()))) {\r\n    base =\r\n      \"I see this is one of your growth areas. Let's break it down with a simple example and then build up gradually.\"\r\n  } else {\r\n    base =\r\n      \"Great question. I’ll explain clearly with a real-world example, then we’ll try a quick check to confirm your understanding.\"\r\n  }\r\n\r\n  const followUps = [\r\n    \"Can you explain this concept back to me in your own words?\",\r\n    \"Would you like 3 practice questions on this?\",\r\n    `Should we review a weak area next${weak.length ? ` (e.g., ${weak[0]})` : \"\"}?`,\r\n  ]\r\n\r\n  if (level !== \"advanced\") {\r\n    followUps.push(\"Want a simpler analogy?\")\r\n  } else {\r\n    followUps.push(\"Want a deeper, exam-style explanation?\")\r\n  }\r\n\r\n  return { text: base, followUps }\r\n}\r\n\r\nexport default function AITutorAssistant({\r\n  className,\r\n  studentName = \"Student\",\r\n  initialLanguage = \"en\",\r\n  progress,\r\n  presetTopics = DEFAULT_PRESETS,\r\n  onSendMessage,\r\n  onNewConversation,\r\n  ttsEnabledByDefault = true,\r\n}: AITutorAssistantProps) {\r\n  const [conversations, setConversations] = useState<Conversation[]>(() =>\r\n    safeLocalStorageGet<Conversation[]>(STORAGE_KEY, [])\r\n  )\r\n  const [activeId, setActiveId] = useState<string | null>(() =>\r\n    safeLocalStorageGet<string | null>(ACTIVE_KEY, null)\r\n  )\r\n  const [input, setInput] = useState(\"\")\r\n  const [language, setLanguage] = useState(initialLanguage)\r\n  const [listening, setListening] = useState(false)\r\n  const [ttsEnabled, setTtsEnabled] = useState(ttsEnabledByDefault)\r\n  const [typing, setTyping] = useState(false)\r\n  const [online, setOnline] = useState<boolean>(true)\r\n  const [pendingQueue, setPendingQueue] = useState<Message[]>([])\r\n\r\n  const recognitionRef = useRef<any | null>(null)\r\n  const scrollRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  const activeConversation = useMemo<Conversation | null>(() => {\r\n    const found = conversations.find((c) => c.id === activeId)\r\n    return found ?? null\r\n  }, [conversations, activeId])\r\n\r\n  const messages = activeConversation?.messages ?? []\r\n\r\n  // Persistence\r\n  useEffect(() => {\r\n    safeLocalStorageSet(STORAGE_KEY, conversations)\r\n  }, [conversations])\r\n\r\n  useEffect(() => {\r\n    safeLocalStorageSet(ACTIVE_KEY, activeId)\r\n  }, [activeId])\r\n\r\n  // Online/offline detection\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return\r\n    const handleOnline = () => {\r\n      setOnline(true)\r\n      if (pendingQueue.length) {\r\n        toast.success(\"Reconnected. Syncing messages...\")\r\n        // Simulate syncing by appending a system note\r\n        const syncNote: Message = {\r\n          id: generateId(\"sys\"),\r\n          role: \"system\",\r\n          content: `Synced ${pendingQueue.length} message(s)`,\r\n          timestamp: now(),\r\n          language,\r\n        }\r\n        if (activeConversation) {\r\n          setConversations((prev) =>\r\n            prev.map((c) =>\r\n              c.id === activeConversation.id\r\n                ? { ...c, messages: [...c.messages, syncNote], lastUpdated: now() }\r\n                : c\r\n            )\r\n          )\r\n        }\r\n        setPendingQueue([])\r\n      } else {\r\n        toast.success(\"Back online\")\r\n      }\r\n    }\r\n    const handleOffline = () => {\r\n      setOnline(false)\r\n      toast.message(\"Offline mode\", {\r\n        description: \"You can continue. Messages will sync when reconnected.\",\r\n      })\r\n    }\r\n    setOnline(navigator.onLine)\r\n    window.addEventListener(\"online\", handleOnline)\r\n    window.addEventListener(\"offline\", handleOffline)\r\n    return () => {\r\n      window.removeEventListener(\"online\", handleOnline)\r\n      window.removeEventListener(\"offline\", handleOffline)\r\n    }\r\n  }, [pendingQueue.length, activeConversation, language])\r\n\r\n  // Init speech recognition\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return\r\n    const SR: any = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition\r\n    if (!SR) return\r\n    const recognizer = new SR()\r\n    recognizer.lang = language\r\n    recognizer.continuous = false\r\n    recognizer.interimResults = true\r\n\r\n    recognizer.onresult = (event: any) => {\r\n      let transcript = \"\"\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        transcript += event.results[i][0].transcript\r\n      }\r\n      setInput(transcript.trim())\r\n    }\r\n    recognizer.onerror = () => {\r\n      setListening(false)\r\n      toast.error(\"Voice input error\")\r\n    }\r\n    recognizer.onend = () => {\r\n      setListening(false)\r\n    }\r\n    recognitionRef.current = recognizer\r\n  }, [language])\r\n\r\n  // Auto-scroll to bottom on new messages\r\n  useEffect(() => {\r\n    const el = scrollRef.current\r\n    if (!el) return\r\n    el.scrollTop = el.scrollHeight\r\n  }, [messages.length, typing])\r\n\r\n  // Speak assistant messages when TTS enabled\r\n  useEffect(() => {\r\n    if (!ttsEnabled) {\r\n      stopSpeaking()\r\n      return\r\n    }\r\n    if (!messages.length) return\r\n    const last = messages[messages.length - 1]\r\n    if (last.role === \"assistant\") {\r\n      speak(last.content, last.language || language)\r\n    }\r\n  }, [messages, ttsEnabled, language])\r\n\r\n  const startNewConversation = useCallback(\r\n    (lang: string) => {\r\n      const conv: Conversation = {\r\n        id: generateId(\"conv\"),\r\n        title: `Session with ${studentName}`,\r\n        lastUpdated: now(),\r\n        language: lang,\r\n        messages: [\r\n          {\r\n            id: generateId(\"msg\"),\r\n            role: \"assistant\",\r\n            content: `Hi ${studentName}! I’m your AI Tutor. How can I help you today? You can type or use the mic button.`,\r\n            timestamp: now(),\r\n            language: lang,\r\n          },\r\n        ],\r\n      }\r\n      setConversations((prev) => [conv, ...prev])\r\n      setActiveId(conv.id)\r\n      onNewConversation?.(conv)\r\n    },\r\n    [onNewConversation, studentName]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!conversations.length) {\r\n      startNewConversation(language)\r\n    } else if (!activeId) {\r\n      setActiveId(conversations[0].id)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const handleSend = useCallback(\r\n    async (text?: string) => {\r\n      const content = (text ?? input).trim()\r\n      if (!content) return\r\n      if (!activeConversation) {\r\n        startNewConversation(language)\r\n      }\r\n      const convId = activeConversation?.id ?? conversations[0]?.id\r\n      if (!convId) return\r\n\r\n      const userMsg: Message = {\r\n        id: generateId(\"msg\"),\r\n        role: \"user\",\r\n        content,\r\n        timestamp: now(),\r\n        language,\r\n      }\r\n\r\n      setConversations((prev) =>\r\n        prev.map((c) =>\r\n          c.id === convId ? { ...c, messages: [...c.messages, userMsg], lastUpdated: now() } : c\r\n        )\r\n      )\r\n      onSendMessage?.(userMsg, (conversations.find((c) => c.id === convId) as Conversation) ?? activeConversation!)\r\n\r\n      setInput(\"\")\r\n      setTyping(true)\r\n\r\n      const proceed = () => {\r\n        const result = mockTutorResponse(content, { progress, language })\r\n        const assistantMsg: Message = {\r\n          id: generateId(\"msg\"),\r\n          role: \"assistant\",\r\n          content: `${result.text}\\n\\n• ${result.followUps.join(\"\\n• \")}`,\r\n          timestamp: now(),\r\n          language,\r\n        }\r\n        setConversations((prev) =>\r\n          prev.map((c) =>\r\n            c.id === convId\r\n              ? { ...c, messages: [...c.messages, assistantMsg], lastUpdated: now() }\r\n              : c\r\n          )\r\n        )\r\n        setTyping(false)\r\n      }\r\n\r\n      if (!online) {\r\n        // Cache locally and queue for sync\r\n        setPendingQueue((q) => [...q, userMsg])\r\n        const offlineNote: Message = {\r\n          id: generateId(\"sys\"),\r\n          role: \"system\",\r\n          content: \"Saved offline. I’ll respond when reconnected.\",\r\n          timestamp: now(),\r\n          language,\r\n        }\r\n        setConversations((prev) =>\r\n          prev.map((c) =>\r\n            c.id === convId ? { ...c, messages: [...c.messages, offlineNote], lastUpdated: now() } : c\r\n          )\r\n        )\r\n        setTyping(false)\r\n        return\r\n      }\r\n\r\n      // Simulate network/AI latency\r\n      setTimeout(proceed, 650)\r\n    },\r\n    [activeConversation, conversations, input, language, onSendMessage, online, progress, startNewConversation]\r\n  )\r\n\r\n  const handlePreset = useCallback(\r\n    (preset: NonNullable<AITutorAssistantProps[\"presetTopics\"]>[number]) => {\r\n      setInput(preset.prompt)\r\n      toast.message(\"Preset loaded\", { description: preset.label })\r\n    },\r\n    []\r\n  )\r\n\r\n  const handleVoiceToggle = useCallback(() => {\r\n    if (!recognitionRef.current) {\r\n      toast.error(\"Voice input not supported on this device\")\r\n      return\r\n    }\r\n    if (listening) {\r\n      recognitionRef.current.stop()\r\n      setListening(false)\r\n    } else {\r\n      try {\r\n        recognitionRef.current.lang = language\r\n        recognitionRef.current.start()\r\n        setListening(true)\r\n      } catch {\r\n        setListening(false)\r\n        toast.error(\"Unable to start voice input\")\r\n      }\r\n    }\r\n  }, [language, listening])\r\n\r\n  const quickSuggestions = useMemo(() => {\r\n    const items: { label: string; text: string }[] = []\r\n    if (progress?.weakAreas?.length) {\r\n      items.push({\r\n        label: \"Review weak area\",\r\n        text: `Help me with ${progress.weakAreas[0]}`,\r\n      })\r\n    }\r\n    if (progress?.recentScores) {\r\n      const lowest = Object.entries(progress.recentScores).sort((a, b) => a[1] - b[1])[0]\r\n      if (lowest) {\r\n        items.push({\r\n          label: \"Practice low score\",\r\n          text: `Give me practice for ${lowest[0]}`,\r\n        })\r\n      }\r\n    }\r\n    items.push(\r\n      { label: \"Explain simply\", text: \"Explain this simply with an example\" },\r\n      { label: \"Give 3 questions\", text: \"Give me 3 practice questions\" }\r\n    )\r\n    return items.slice(0, 4)\r\n  }, [progress])\r\n\r\n  const LanguageIcon = Languages\r\n  const EmergencyIcon = MessageCircleOff\r\n  const CoachIcon = MessageCircleMore\r\n  const PracticeIcon = MessageSquareText\r\n  const ConceptIcon = CircleQuestionMark\r\n\r\n  return (\r\n    <Card className={cn(\"w-full bg-card border-border\", className)}>\r\n      <CardHeader className=\"gap-2\">\r\n        <div className=\"flex items-center justify-between gap-3\">\r\n          <div className=\"flex items-center gap-3 min-w-0\">\r\n            <div className=\"size-10 rounded-full bg-accent flex items-center justify-center\">\r\n              <GraduationCap className=\"size-5 text-foreground\" aria-hidden=\"true\" />\r\n            </div>\r\n            <div className=\"min-w-0\">\r\n              <CardTitle className=\"text-base sm:text-lg truncate\">\r\n                AI Tutor Assistant\r\n              </CardTitle>\r\n              <CardDescription className=\"text-xs sm:text-sm\">\r\n                Personalized help for {studentName}\r\n              </CardDescription>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Badge\r\n              variant=\"outline\"\r\n              className={cn(\r\n                \"rounded-full px-2 py-1 text-xs\",\r\n                online ? \"bg-accent text-foreground border-transparent\" : \"bg-muted text-muted-foreground\"\r\n              )}\r\n              aria-live=\"polite\"\r\n            >\r\n              {online ? \"Online\" : \"Offline\"}\r\n            </Badge>\r\n\r\n            <div className=\"hidden sm:flex items-center gap-2\">\r\n              <Label htmlFor=\"tts\" className=\"text-xs text-muted-foreground\">\r\n                Read aloud\r\n              </Label>\r\n              <Switch\r\n                id=\"tts\"\r\n                checked={ttsEnabled}\r\n                onCheckedChange={(v) => setTtsEnabled(v)}\r\n                aria-label=\"Toggle text-to-speech\"\r\n              />\r\n            </div>\r\n\r\n            <Select\r\n              value={language}\r\n              onValueChange={(v) => {\r\n                setLanguage(v)\r\n                toast.message(\"Language switched\", { description: LANG_OPTIONS.find((x) => x.value === v)?.label })\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"w-[120px] h-9 bg-secondary border-input\">\r\n                <LanguageIcon className=\"mr-2 size-4\" aria-hidden=\"true\" />\r\n                <SelectValue placeholder=\"Language\" />\r\n              </SelectTrigger>\r\n              <SelectContent className=\"bg-popover\">\r\n                {LANG_OPTIONS.map((opt) => (\r\n                  <SelectItem key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n        {!online && (\r\n          <div className=\"text-xs text-muted-foreground bg-muted/60 rounded-md px-3 py-2\">\r\n            You’re offline. Messages will be saved and synced automatically when you reconnect.\r\n          </div>\r\n        )}\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {presetTopics?.map((p) => {\r\n            const IconComp =\r\n              p.icon === \"emergency\"\r\n                ? EmergencyIcon\r\n                : p.icon === \"coach\"\r\n                ? CoachIcon\r\n                : p.icon === \"practice\"\r\n                ? PracticeIcon\r\n                : ConceptIcon\r\n            return (\r\n              <Button\r\n                key={p.id}\r\n                variant=\"secondary\"\r\n                className=\"h-8 rounded-full bg-secondary text-foreground hover:bg-accent\"\r\n                onClick={() => handlePreset(p)}\r\n              >\r\n                <IconComp className=\"size-4 mr-2\" aria-hidden=\"true\" />\r\n                <span className=\"text-xs\">{p.label}</span>\r\n              </Button>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <Separator className=\"bg-border\" />\r\n\r\n        <div\r\n          className=\"relative rounded-xl bg-secondary p-2\"\r\n          role=\"region\"\r\n          aria-label=\"Chat conversation\"\r\n        >\r\n          <ScrollArea className=\"h-[360px] sm:h-[420px]\">\r\n            <div ref={scrollRef} className=\"px-1 py-2 space-y-3 min-w-0\">\r\n              {messages.map((m) => (\r\n                <ChatBubble key={m.id} role={m.role} content={m.content} timestamp={m.timestamp} />\r\n              ))}\r\n              {typing && <TypingIndicator />}\r\n            </div>\r\n          </ScrollArea>\r\n        </div>\r\n\r\n        {quickSuggestions.length > 0 && (\r\n          <div className=\"flex flex-wrap items-center gap-2\">\r\n            {quickSuggestions.map((q, idx) => (\r\n              <Button\r\n                key={`${q.label}-${idx}`}\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"h-8 rounded-full bg-accent hover:bg-accent/80 text-foreground\"\r\n                onClick={() => handleSend(q.text)}\r\n              >\r\n                <Brain className=\"size-4 mr-2\" aria-hidden=\"true\" />\r\n                <span className=\"text-xs\">{q.label}</span>\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n\r\n      <CardFooter className=\"flex flex-col gap-3\">\r\n        <div className=\"flex items-end gap-2 w-full\">\r\n          <div className=\"flex-1 min-w-0\">\r\n            <Textarea\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              placeholder=\"Type your question... or use the mic\"\r\n              className=\"bg-card border-input focus-visible:ring-ring min-h-[56px] resize-none\"\r\n              rows={3}\r\n              onKeyDown={(e) => {\r\n                if ((e.metaKey || e.ctrlKey) && e.key === \"Enter\") {\r\n                  e.preventDefault()\r\n                  handleSend()\r\n                }\r\n              }}\r\n              aria-label=\"Message input\"\r\n            />\r\n            <div className=\"flex items-center justify-between mt-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <TooltipProvider>\r\n                  <Tooltip>\r\n                    <TooltipTrigger asChild>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant={listening ? \"default\" : \"secondary\"}\r\n                        onClick={handleVoiceToggle}\r\n                        className={cn(\r\n                          \"h-9 rounded-full\",\r\n                          listening ? \"bg-primary text-primary-foreground\" : \"bg-secondary\"\r\n                        )}\r\n                        aria-pressed={listening}\r\n                        aria-label={listening ? \"Stop voice input\" : \"Start voice input\"}\r\n                      >\r\n                        <Speech className=\"size-4 mr-2\" aria-hidden=\"true\" />\r\n                        {listening ? \"Listening...\" : \"Voice\"}\r\n                      </Button>\r\n                    </TooltipTrigger>\r\n                    <TooltipContent>Speak your question</TooltipContent>\r\n                  </Tooltip>\r\n\r\n                  <Tooltip>\r\n                    <TooltipTrigger asChild>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant={ttsEnabled ? \"default\" : \"secondary\"}\r\n                        onClick={() => setTtsEnabled((v) => !v)}\r\n                        className=\"h-9 rounded-full\"\r\n                        aria-pressed={ttsEnabled}\r\n                        aria-label=\"Toggle read aloud\"\r\n                      >\r\n                        <MessageSquare className=\"size-4 mr-2\" aria-hidden=\"true\" />\r\n                        {ttsEnabled ? \"Read aloud: On\" : \"Read aloud: Off\"}\r\n                      </Button>\r\n                    </TooltipTrigger>\r\n                    <TooltipContent>Toggle text-to-speech for tutor replies</TooltipContent>\r\n                  </Tooltip>\r\n                </TooltipProvider>\r\n              </div>\r\n\r\n              <div className=\"flex items-center gap-2\">\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"ghost\"\r\n                  className=\"h-9 rounded-full\"\r\n                  onClick={() => startNewConversation(language)}\r\n                >\r\n                  <MessageCirclePlus className=\"size-4 mr-2\" aria-hidden=\"true\" />\r\n                  New\r\n                </Button>\r\n                <Button\r\n                  type=\"button\"\r\n                  onClick={() => handleSend()}\r\n                  className=\"h-9 rounded-full\"\r\n                  disabled={!input.trim()}\r\n                >\r\n                  Send\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <ConversationTray\r\n          conversations={conversations}\r\n          activeId={activeId}\r\n          onSelect={(id) => setActiveId(id)}\r\n          onRename={(id, title) =>\r\n            setConversations((prev) =>\r\n              prev.map((c) => (c.id === id ? { ...c, title, lastUpdated: now() } : c))\r\n            )\r\n          }\r\n          onDelete={(id) => {\r\n            setConversations((prev) => prev.filter((c) => c.id !== id))\r\n            if (activeId === id) {\r\n              const next = conversations.find((c) => c.id !== id)\r\n              setActiveId(next?.id ?? null)\r\n            }\r\n          }}\r\n        />\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nfunction ChatBubble({\r\n  role,\r\n  content,\r\n  timestamp,\r\n}: {\r\n  role: MessageRole\r\n  content: string\r\n  timestamp: number\r\n}) {\r\n  const isUser = role === \"user\"\r\n  const bubbleClasses = cn(\r\n    \"max-w-[85%] sm:max-w-[70%] rounded-2xl px-4 py-3 shadow-sm break-words\",\r\n    isUser ? \"bg-primary text-primary-foreground\" : role === \"system\" ? \"bg-muted text-muted-foreground\" : \"bg-card text-foreground\"\r\n  )\r\n  const rowClasses = cn(\"w-full flex\", isUser ? \"justify-end\" : \"justify-start\")\r\n\r\n  return (\r\n    <div className={rowClasses}>\r\n      <div className=\"flex flex-col gap-1\">\r\n        <div className={bubbleClasses} role=\"article\" aria-live=\"polite\">\r\n          <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{content}</p>\r\n        </div>\r\n        <span className=\"text-[11px] text-muted-foreground pl-2\">\r\n          {new Date(timestamp).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction TypingIndicator() {\r\n  return (\r\n    <div className=\"w-full flex justify-start\">\r\n      <div className=\"bg-card text-foreground rounded-2xl px-4 py-3 shadow-sm inline-flex items-center gap-2\">\r\n        <span className=\"sr-only\">Tutor is typing</span>\r\n        <div className=\"flex items-center gap-1\">\r\n          <Dot />\r\n          <Dot delay=\"150ms\" />\r\n          <Dot delay=\"300ms\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Dot({ delay = \"0ms\" }: { delay?: string }) {\r\n  return (\r\n    <span\r\n      className=\"inline-block size-2 rounded-full bg-muted-foreground/60 animate-bounce\"\r\n      style={{ animationDelay: delay }}\r\n      aria-hidden=\"true\"\r\n    />\r\n  )\r\n}\r\n\r\nfunction ConversationTray({\r\n  conversations,\r\n  activeId,\r\n  onSelect,\r\n  onRename,\r\n  onDelete,\r\n}: {\r\n  conversations: Conversation[]\r\n  activeId: string | null\r\n  onSelect: (id: string) => void\r\n  onRename: (id: string, title: string) => void\r\n  onDelete: (id: string) => void\r\n}) {\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Brain className=\"size-4 text-muted-foreground\" aria-hidden=\"true\" />\r\n          <span className=\"text-sm text-muted-foreground\">Conversation history</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex gap-2 overflow-x-auto py-1\">\r\n        {conversations.map((c) => (\r\n          <button\r\n            key={c.id}\r\n            onClick={() => onSelect(c.id)}\r\n            className={cn(\r\n              \"group shrink-0 text-left rounded-lg border px-3 py-2 bg-card transition\",\r\n              \"hover:bg-accent hover:border-transparent\",\r\n              c.id === activeId ? \"border-primary bg-accent\" : \"border-input\"\r\n            )}\r\n            aria-current={c.id === activeId ? \"true\" : \"false\"}\r\n          >\r\n            <div className=\"text-sm font-medium truncate max-w-[180px]\">{c.title}</div>\r\n            <div className=\"text-xs text-muted-foreground\">\r\n              {new Date(c.lastUpdated).toLocaleDateString([], { month: \"short\", day: \"numeric\" })}\r\n            </div>\r\n            <div className=\"flex items-center gap-2 mt-2 opacity-0 group-hover:opacity-100 transition\">\r\n              <InlineAction\r\n                label=\"Rename\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  const next = prompt(\"Rename conversation\", c.title)\r\n                  if (next && next.trim()) onRename(c.id, next.trim())\r\n                }}\r\n              >\r\n                <MessageSquare className=\"size-3.5\" aria-hidden=\"true\" />\r\n              </InlineAction>\r\n              <InlineAction\r\n                label=\"Delete\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  if (confirm(\"Delete this conversation?\")) onDelete(c.id)\r\n                }}\r\n              >\r\n                <MessageCircleOff className=\"size-3.5\" aria-hidden=\"true\" />\r\n              </InlineAction>\r\n            </div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction InlineAction({\r\n  label,\r\n  onClick,\r\n  children,\r\n}: {\r\n  label: string\r\n  onClick: (e: React.MouseEvent) => void\r\n  children: React.ReactNode\r\n}) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClick}\r\n      className=\"text-xs px-2 py-1 rounded-full bg-secondary hover:bg-accent inline-flex items-center gap-1\"\r\n      aria-label={label}\r\n      title={label}\r\n    >\r\n      {children}\r\n      <span>{label}</span>\r\n    </button>\r\n  )\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAnCA;;;;;;;;;;;;;;;AAmFA,MAAM,cAAc;AACpB,MAAM,aAAa;AAEnB,MAAM,kBAAyD;IAC7D;QAAE,IAAI;QAAgB,OAAO;QAAqB,QAAQ;QAAyB,MAAM;IAAU;IACnG;QAAE,IAAI;QAAqB,OAAO;QAAqB,QAAQ;QAAqC,MAAM;IAAW;IACrH;QAAE,IAAI;QAAc,OAAO;QAAoB,QAAQ;QAAsC,MAAM;IAAQ;IAC3G;QAAE,IAAI;QAAe,OAAO;QAAwB,QAAQ;QAA8C,MAAM;IAAY;CAC7H;AAED,MAAM,eAAe;IACnB;QAAE,OAAO;QAAM,OAAO;IAAU;IAChC;QAAE,OAAO;QAAM,OAAO;IAAS;IAC/B;QAAE,OAAO;QAAM,OAAO;IAAQ;IAC9B;QAAE,OAAO;QAAM,OAAO;IAAS;IAC/B;QAAE,OAAO;QAAM,OAAO;IAAQ;IAC9B;QAAE,OAAO;QAAM,OAAO;IAAQ;IAC9B;QAAE,OAAO;QAAM,OAAO;IAAQ;IAC9B;QAAE,OAAO;QAAM,OAAO;IAAS;IAC/B;QAAE,OAAO;QAAM,OAAO;IAAU;IAChC;QAAE,OAAO;QAAM,OAAO;IAAO;CAC9B;AAED,SAAS,WAAW,SAAS,KAAK;IAChC,OAAO,GAAG,OAAO,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE,KAAK,GAAG,GAAG,QAAQ,CAAC,KAAK;AAC1F;AAEA,SAAS;IACP,OAAO,KAAK,GAAG;AACjB;AAEA,SAAS,oBAAuB,GAAW,EAAE,QAAW;IACtD,uCAAmC;;IAAc;IACjD,IAAI;QACF,MAAM,MAAM,OAAO,YAAY,CAAC,OAAO,CAAC;QACxC,OAAO,MAAO,KAAK,KAAK,CAAC,OAAa;IACxC,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEA,SAAS,oBAAuB,GAAW,EAAE,KAAQ;IACnD,uCAAmC;;IAAK;IACxC,IAAI;QACF,OAAO,YAAY,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC;IAClD,EAAE,OAAM;IACN,SAAS;IACX;AACF;AAEA,SAAS,MAAM,IAAY,EAAE,IAAY;IACvC,uCAAmC;;IAAK;IACxC,MAAM,QAAQ,OAAO,eAAe;IACpC,IAAI,CAAC,OAAO;IACZ,MAAM,QAAQ,IAAI,yBAAyB;IAC3C,MAAM,IAAI,GAAG;IACb,mCAAmC;IACnC,MAAM,SAAS,MAAM,SAAS;IAC9B,MAAM,QAAQ,OAAO,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,EAAE,cAAc,WAAW,KAAK,WAAW;IAClF,IAAI,OAAO,MAAM,KAAK,GAAG;IACzB,MAAM,KAAK,CAAC;AACd;AAEA,SAAS;IACP,uCAAmC;;IAAK;IACxC,MAAM,QAAQ,OAAO,eAAe;IACpC,IAAI,SAAS,MAAM,QAAQ,EAAE,MAAM,MAAM;AAC3C;AAEA,0GAA0G;AAC1G,SAAS,kBAAkB,KAAa,EAAE,OAAsD;IAC9F,MAAM,OAAO,QAAQ,QAAQ,EAAE,aAAa,EAAE;IAC9C,MAAM,QAAQ,QAAQ,QAAQ,EAAE,SAAS;IACzC,MAAM,QAAQ,MAAM,WAAW;IAC/B,IAAI,OAAO;IAEX,IAAI,MAAM,QAAQ,CAAC,iBAAiB,MAAM,QAAQ,CAAC,aAAa;QAC9D,OACE;IACJ,OAAO,IAAI,MAAM,QAAQ,CAAC,WAAW,MAAM,QAAQ,CAAC,WAAW,MAAM,QAAQ,CAAC,cAAc;QAC1F,OACE;IACJ,OAAO,IAAI,MAAM,QAAQ,CAAC,aAAa;QACrC,OACE;IACJ,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,IAAM,MAAM,QAAQ,CAAC,EAAE,WAAW,MAAM;QAC5D,OACE;IACJ,OAAO;QACL,OACE;IACJ;IAEA,MAAM,YAAY;QAChB;QACA;QACA,CAAC,iCAAiC,EAAE,KAAK,MAAM,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;KAChF;IAED,IAAI,UAAU,YAAY;QACxB,UAAU,IAAI,CAAC;IACjB,OAAO;QACL,UAAU,IAAI,CAAC;IACjB;IAEA,OAAO;QAAE,MAAM;QAAM;IAAU;AACjC;AAEe,SAAS,iBAAiB,EACvC,SAAS,EACT,cAAc,SAAS,EACvB,kBAAkB,IAAI,EACtB,QAAQ,EACR,eAAe,eAAe,EAC9B,aAAa,EACb,iBAAiB,EACjB,sBAAsB,IAAI,EACJ;;IACtB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD;qCAAkB,IACjE,oBAAoC,aAAa,EAAE;;IAErD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD;qCAAiB,IACtD,oBAAmC,YAAY;;IAEjD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAW;IAC9C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IAE9D,MAAM,iBAAiB,CAAA,GAAA,uLAAA,CAAA,SAAM,AAAD,EAAc;IAC1C,MAAM,YAAY,CAAA,GAAA,uLAAA,CAAA,SAAM,AAAD,EAAyB;IAEhD,MAAM,qBAAqB,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD;wDAAuB;YACtD,MAAM,QAAQ,cAAc,IAAI;sEAAC,CAAC,IAAM,EAAE,EAAE,KAAK;;YACjD,OAAO,SAAS;QAClB;uDAAG;QAAC;QAAe;KAAS;IAE5B,MAAM,WAAW,oBAAoB,YAAY,EAAE;IAEnD,cAAc;IACd,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,oBAAoB,aAAa;QACnC;qCAAG;QAAC;KAAc;IAElB,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,oBAAoB,YAAY;QAClC;qCAAG;QAAC;KAAS;IAEb,2BAA2B;IAC3B,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,uCAAmC;;YAAK;YACxC,MAAM;2DAAe;oBACnB,UAAU;oBACV,IAAI,aAAa,MAAM,EAAE;wBACvB,qKAAA,CAAA,QAAK,CAAC,OAAO,CAAC;wBACd,8CAA8C;wBAC9C,MAAM,WAAoB;4BACxB,IAAI,WAAW;4BACf,MAAM;4BACN,SAAS,CAAC,OAAO,EAAE,aAAa,MAAM,CAAC,WAAW,CAAC;4BACnD,WAAW;4BACX;wBACF;wBACA,IAAI,oBAAoB;4BACtB;2EAAiB,CAAC,OAChB,KAAK,GAAG;mFAAC,CAAC,IACR,EAAE,EAAE,KAAK,mBAAmB,EAAE,GAC1B;gDAAE,GAAG,CAAC;gDAAE,UAAU;uDAAI,EAAE,QAAQ;oDAAE;iDAAS;gDAAE,aAAa;4CAAM,IAChE;;;wBAGV;wBACA,gBAAgB,EAAE;oBACpB,OAAO;wBACL,qKAAA,CAAA,QAAK,CAAC,OAAO,CAAC;oBAChB;gBACF;;YACA,MAAM;4DAAgB;oBACpB,UAAU;oBACV,qKAAA,CAAA,QAAK,CAAC,OAAO,CAAC,gBAAgB;wBAC5B,aAAa;oBACf;gBACF;;YACA,UAAU,UAAU,MAAM;YAC1B,OAAO,gBAAgB,CAAC,UAAU;YAClC,OAAO,gBAAgB,CAAC,WAAW;YACnC;8CAAO;oBACL,OAAO,mBAAmB,CAAC,UAAU;oBACrC,OAAO,mBAAmB,CAAC,WAAW;gBACxC;;QACF;qCAAG;QAAC,aAAa,MAAM;QAAE;QAAoB;KAAS;IAEtD,0BAA0B;IAC1B,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,uCAAmC;;YAAK;YACxC,MAAM,KAAU,AAAC,OAAe,iBAAiB,IAAI,AAAC,OAAe,uBAAuB;YAC5F,IAAI,CAAC,IAAI;YACT,MAAM,aAAa,IAAI;YACvB,WAAW,IAAI,GAAG;YAClB,WAAW,UAAU,GAAG;YACxB,WAAW,cAAc,GAAG;YAE5B,WAAW,QAAQ;8CAAG,CAAC;oBACrB,IAAI,aAAa;oBACjB,IAAK,IAAI,IAAI,MAAM,WAAW,EAAE,IAAI,MAAM,OAAO,CAAC,MAAM,EAAE,IAAK;wBAC7D,cAAc,MAAM,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU;oBAC9C;oBACA,SAAS,WAAW,IAAI;gBAC1B;;YACA,WAAW,OAAO;8CAAG;oBACnB,aAAa;oBACb,qKAAA,CAAA,QAAK,CAAC,KAAK,CAAC;gBACd;;YACA,WAAW,KAAK;8CAAG;oBACjB,aAAa;gBACf;;YACA,eAAe,OAAO,GAAG;QAC3B;qCAAG;QAAC;KAAS;IAEb,wCAAwC;IACxC,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,MAAM,KAAK,UAAU,OAAO;YAC5B,IAAI,CAAC,IAAI;YACT,GAAG,SAAS,GAAG,GAAG,YAAY;QAChC;qCAAG;QAAC,SAAS,MAAM;QAAE;KAAO;IAE5B,4CAA4C;IAC5C,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,CAAC,YAAY;gBACf;gBACA;YACF;YACA,IAAI,CAAC,SAAS,MAAM,EAAE;YACtB,MAAM,OAAO,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;YAC1C,IAAI,KAAK,IAAI,KAAK,aAAa;gBAC7B,MAAM,KAAK,OAAO,EAAE,KAAK,QAAQ,IAAI;YACvC;QACF;qCAAG;QAAC;QAAU;QAAY;KAAS;IAEnC,MAAM,uBAAuB,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD;8DACrC,CAAC;YACC,MAAM,OAAqB;gBACzB,IAAI,WAAW;gBACf,OAAO,CAAC,aAAa,EAAE,aAAa;gBACpC,aAAa;gBACb,UAAU;gBACV,UAAU;oBACR;wBACE,IAAI,WAAW;wBACf,MAAM;wBACN,SAAS,CAAC,GAAG,EAAE,YAAY,kFAAkF,CAAC;wBAC9G,WAAW;wBACX,UAAU;oBACZ;iBACD;YACH;YACA;sEAAiB,CAAC,OAAS;wBAAC;2BAAS;qBAAK;;YAC1C,YAAY,KAAK,EAAE;YACnB,oBAAoB;QACtB;6DACA;QAAC;QAAmB;KAAY;IAGlC,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,CAAC,cAAc,MAAM,EAAE;gBACzB,qBAAqB;YACvB,OAAO,IAAI,CAAC,UAAU;gBACpB,YAAY,aAAa,CAAC,EAAE,CAAC,EAAE;YACjC;QACA,uDAAuD;QACzD;qCAAG,EAAE;IAEL,MAAM,aAAa,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD;oDAC3B,OAAO;YACL,MAAM,UAAU,CAAC,QAAQ,KAAK,EAAE,IAAI;YACpC,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,oBAAoB;gBACvB,qBAAqB;YACvB;YACA,MAAM,SAAS,oBAAoB,MAAM,aAAa,CAAC,EAAE,EAAE;YAC3D,IAAI,CAAC,QAAQ;YAEb,MAAM,UAAmB;gBACvB,IAAI,WAAW;gBACf,MAAM;gBACN;gBACA,WAAW;gBACX;YACF;YAEA;4DAAiB,CAAC,OAChB,KAAK,GAAG;oEAAC,CAAC,IACR,EAAE,EAAE,KAAK,SAAS;gCAAE,GAAG,CAAC;gCAAE,UAAU;uCAAI,EAAE,QAAQ;oCAAE;iCAAQ;gCAAE,aAAa;4BAAM,IAAI;;;YAGzF,gBAAgB,SAAS,AAAC,cAAc,IAAI;4DAAC,CAAC,IAAM,EAAE,EAAE,KAAK;8DAA4B;YAEzF,SAAS;YACT,UAAU;YAEV,MAAM;oEAAU;oBACd,MAAM,SAAS,kBAAkB,SAAS;wBAAE;wBAAU;oBAAS;oBAC/D,MAAM,eAAwB;wBAC5B,IAAI,WAAW;wBACf,MAAM;wBACN,SAAS,GAAG,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,SAAS,CAAC,IAAI,CAAC,SAAS;wBAC/D,WAAW;wBACX;oBACF;oBACA;4EAAiB,CAAC,OAChB,KAAK,GAAG;oFAAC,CAAC,IACR,EAAE,EAAE,KAAK,SACL;wCAAE,GAAG,CAAC;wCAAE,UAAU;+CAAI,EAAE,QAAQ;4CAAE;yCAAa;wCAAE,aAAa;oCAAM,IACpE;;;oBAGR,UAAU;gBACZ;;YAEA,IAAI,CAAC,QAAQ;gBACX,mCAAmC;gBACnC;gEAAgB,CAAC,IAAM;+BAAI;4BAAG;yBAAQ;;gBACtC,MAAM,cAAuB;oBAC3B,IAAI,WAAW;oBACf,MAAM;oBACN,SAAS;oBACT,WAAW;oBACX;gBACF;gBACA;gEAAiB,CAAC,OAChB,KAAK,GAAG;wEAAC,CAAC,IACR,EAAE,EAAE,KAAK,SAAS;oCAAE,GAAG,CAAC;oCAAE,UAAU;2CAAI,EAAE,QAAQ;wCAAE;qCAAY;oCAAE,aAAa;gCAAM,IAAI;;;gBAG7F,UAAU;gBACV;YACF;YAEA,8BAA8B;YAC9B,WAAW,SAAS;QACtB;mDACA;QAAC;QAAoB;QAAe;QAAO;QAAU;QAAe;QAAQ;QAAU;KAAqB;IAG7G,MAAM,eAAe,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD;sDAC7B,CAAC;YACC,SAAS,OAAO,MAAM;YACtB,qKAAA,CAAA,QAAK,CAAC,OAAO,CAAC,iBAAiB;gBAAE,aAAa,OAAO,KAAK;YAAC;QAC7D;qDACA,EAAE;IAGJ,MAAM,oBAAoB,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD;2DAAE;YACpC,IAAI,CAAC,eAAe,OAAO,EAAE;gBAC3B,qKAAA,CAAA,QAAK,CAAC,KAAK,CAAC;gBACZ;YACF;YACA,IAAI,WAAW;gBACb,eAAe,OAAO,CAAC,IAAI;gBAC3B,aAAa;YACf,OAAO;gBACL,IAAI;oBACF,eAAe,OAAO,CAAC,IAAI,GAAG;oBAC9B,eAAe,OAAO,CAAC,KAAK;oBAC5B,aAAa;gBACf,EAAE,OAAM;oBACN,aAAa;oBACb,qKAAA,CAAA,QAAK,CAAC,KAAK,CAAC;gBACd;YACF;QACF;0DAAG;QAAC;QAAU;KAAU;IAExB,MAAM,mBAAmB,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD;sDAAE;YAC/B,MAAM,QAA2C,EAAE;YACnD,IAAI,UAAU,WAAW,QAAQ;gBAC/B,MAAM,IAAI,CAAC;oBACT,OAAO;oBACP,MAAM,CAAC,aAAa,EAAE,SAAS,SAAS,CAAC,EAAE,EAAE;gBAC/C;YACF;YACA,IAAI,UAAU,cAAc;gBAC1B,MAAM,SAAS,OAAO,OAAO,CAAC,SAAS,YAAY,EAAE,IAAI;kEAAC,CAAC,GAAG,IAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;gEAAC,CAAC,EAAE;gBACnF,IAAI,QAAQ;oBACV,MAAM,IAAI,CAAC;wBACT,OAAO;wBACP,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,EAAE,EAAE;oBAC3C;gBACF;YACF;YACA,MAAM,IAAI,CACR;gBAAE,OAAO;gBAAkB,MAAM;YAAsC,GACvE;gBAAE,OAAO;gBAAoB,MAAM;YAA+B;YAEpE,OAAO,MAAM,KAAK,CAAC,GAAG;QACxB;qDAAG;QAAC;KAAS;IAEb,MAAM,eAAe,yOAAA,CAAA,YAAS;IAC9B,MAAM,gBAAgB,+PAAA,CAAA,mBAAgB;IACtC,MAAM,YAAY,iQAAA,CAAA,oBAAiB;IACnC,MAAM,eAAe,iQAAA,CAAA,oBAAiB;IACtC,MAAM,cAAc,mQAAA,CAAA,qBAAkB;IAEtC,qBACE,uNAAC,6JAAA,CAAA,OAAI;QAAC,WAAW,CAAA,GAAA,gJAAA,CAAA,KAAE,AAAD,EAAE,gCAAgC;;0BAClD,uNAAC,6JAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,uNAAC;wBAAI,WAAU;;0CACb,uNAAC;gCAAI,WAAU;;kDACb,uNAAC;wCAAI,WAAU;kDACb,cAAA,uNAAC,qPAAA,CAAA,gBAAa;4CAAC,WAAU;4CAAyB,eAAY;;;;;;;;;;;kDAEhE,uNAAC;wCAAI,WAAU;;0DACb,uNAAC,6JAAA,CAAA,YAAS;gDAAC,WAAU;0DAAgC;;;;;;0DAGrD,uNAAC,6JAAA,CAAA,kBAAe;gDAAC,WAAU;;oDAAqB;oDACvB;;;;;;;;;;;;;;;;;;;0CAI7B,uNAAC;gCAAI,WAAU;;kDACb,uNAAC,8JAAA,CAAA,QAAK;wCACJ,SAAQ;wCACR,WAAW,CAAA,GAAA,gJAAA,CAAA,KAAE,AAAD,EACV,kCACA,SAAS,iDAAiD;wCAE5D,aAAU;kDAET,SAAS,WAAW;;;;;;kDAGvB,uNAAC;wCAAI,WAAU;;0DACb,uNAAC,8JAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAM,WAAU;0DAAgC;;;;;;0DAG/D,uNAAC,+JAAA,CAAA,SAAM;gDACL,IAAG;gDACH,SAAS;gDACT,iBAAiB,CAAC,IAAM,cAAc;gDACtC,cAAW;;;;;;;;;;;;kDAIf,uNAAC,+JAAA,CAAA,SAAM;wCACL,OAAO;wCACP,eAAe,CAAC;4CACd,YAAY;4CACZ,qKAAA,CAAA,QAAK,CAAC,OAAO,CAAC,qBAAqB;gDAAE,aAAa,aAAa,IAAI,CAAC,CAAC,IAAM,EAAE,KAAK,KAAK,IAAI;4CAAM;wCACnG;;0DAEA,uNAAC,+JAAA,CAAA,gBAAa;gDAAC,WAAU;;kEACvB,uNAAC;wDAAa,WAAU;wDAAc,eAAY;;;;;;kEAClD,uNAAC,+JAAA,CAAA,cAAW;wDAAC,aAAY;;;;;;;;;;;;0DAE3B,uNAAC,+JAAA,CAAA,gBAAa;gDAAC,WAAU;0DACtB,aAAa,GAAG,CAAC,CAAC,oBACjB,uNAAC,+JAAA,CAAA,aAAU;wDAAiB,OAAO,IAAI,KAAK;kEACzC,IAAI,KAAK;uDADK,IAAI,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASnC,CAAC,wBACA,uNAAC;wBAAI,WAAU;kCAAiE;;;;;;;;;;;;0BAMpF,uNAAC,6JAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,uNAAC;wBAAI,WAAU;kCACZ,cAAc,IAAI,CAAC;4BAClB,MAAM,WACJ,EAAE,IAAI,KAAK,cACP,gBACA,EAAE,IAAI,KAAK,UACX,YACA,EAAE,IAAI,KAAK,aACX,eACA;4BACN,qBACE,uNAAC,+JAAA,CAAA,SAAM;gCAEL,SAAQ;gCACR,WAAU;gCACV,SAAS,IAAM,aAAa;;kDAE5B,uNAAC;wCAAS,WAAU;wCAAc,eAAY;;;;;;kDAC9C,uNAAC;wCAAK,WAAU;kDAAW,EAAE,KAAK;;;;;;;+BAN7B,EAAE,EAAE;;;;;wBASf;;;;;;kCAGF,uNAAC,kKAAA,CAAA,YAAS;wBAAC,WAAU;;;;;;kCAErB,uNAAC;wBACC,WAAU;wBACV,MAAK;wBACL,cAAW;kCAEX,cAAA,uNAAC,uKAAA,CAAA,aAAU;4BAAC,WAAU;sCACpB,cAAA,uNAAC;gCAAI,KAAK;gCAAW,WAAU;;oCAC5B,SAAS,GAAG,CAAC,CAAC,kBACb,uNAAC;4CAAsB,MAAM,EAAE,IAAI;4CAAE,SAAS,EAAE,OAAO;4CAAE,WAAW,EAAE,SAAS;2CAA9D,EAAE,EAAE;;;;;oCAEtB,wBAAU,uNAAC;;;;;;;;;;;;;;;;;;;;;oBAKjB,iBAAiB,MAAM,GAAG,mBACzB,uNAAC;wBAAI,WAAU;kCACZ,iBAAiB,GAAG,CAAC,CAAC,GAAG,oBACxB,uNAAC,+JAAA,CAAA,SAAM;gCAEL,SAAQ;gCACR,MAAK;gCACL,WAAU;gCACV,SAAS,IAAM,WAAW,EAAE,IAAI;;kDAEhC,uNAAC,iOAAA,CAAA,QAAK;wCAAC,WAAU;wCAAc,eAAY;;;;;;kDAC3C,uNAAC;wCAAK,WAAU;kDAAW,EAAE,KAAK;;;;;;;+BAP7B,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK;;;;;;;;;;;;;;;;0BAclC,uNAAC,6JAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,uNAAC;wBAAI,WAAU;kCACb,cAAA,uNAAC;4BAAI,WAAU;;8CACb,uNAAC,iKAAA,CAAA,WAAQ;oCACP,OAAO;oCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oCACxC,aAAY;oCACZ,WAAU;oCACV,MAAM;oCACN,WAAW,CAAC;wCACV,IAAI,CAAC,EAAE,OAAO,IAAI,EAAE,OAAO,KAAK,EAAE,GAAG,KAAK,SAAS;4CACjD,EAAE,cAAc;4CAChB;wCACF;oCACF;oCACA,cAAW;;;;;;8CAEb,uNAAC;oCAAI,WAAU;;sDACb,uNAAC;4CAAI,WAAU;sDACb,cAAA,uNAAC,gKAAA,CAAA,kBAAe;;kEACd,uNAAC,gKAAA,CAAA,UAAO;;0EACN,uNAAC,gKAAA,CAAA,iBAAc;gEAAC,OAAO;0EACrB,cAAA,uNAAC,+JAAA,CAAA,SAAM;oEACL,MAAK;oEACL,SAAS,YAAY,YAAY;oEACjC,SAAS;oEACT,WAAW,CAAA,GAAA,gJAAA,CAAA,KAAE,AAAD,EACV,oBACA,YAAY,uCAAuC;oEAErD,gBAAc;oEACd,cAAY,YAAY,qBAAqB;;sFAE7C,uNAAC,mOAAA,CAAA,SAAM;4EAAC,WAAU;4EAAc,eAAY;;;;;;wEAC3C,YAAY,iBAAiB;;;;;;;;;;;;0EAGlC,uNAAC,gKAAA,CAAA,iBAAc;0EAAC;;;;;;;;;;;;kEAGlB,uNAAC,gKAAA,CAAA,UAAO;;0EACN,uNAAC,gKAAA,CAAA,iBAAc;gEAAC,OAAO;0EACrB,cAAA,uNAAC,+JAAA,CAAA,SAAM;oEACL,MAAK;oEACL,SAAS,aAAa,YAAY;oEAClC,SAAS,IAAM,cAAc,CAAC,IAAM,CAAC;oEACrC,WAAU;oEACV,gBAAc;oEACd,cAAW;;sFAEX,uNAAC,qPAAA,CAAA,gBAAa;4EAAC,WAAU;4EAAc,eAAY;;;;;;wEAClD,aAAa,mBAAmB;;;;;;;;;;;;0EAGrC,uNAAC,gKAAA,CAAA,iBAAc;0EAAC;;;;;;;;;;;;;;;;;;;;;;;sDAKtB,uNAAC;4CAAI,WAAU;;8DACb,uNAAC,+JAAA,CAAA,SAAM;oDACL,MAAK;oDACL,SAAQ;oDACR,WAAU;oDACV,SAAS,IAAM,qBAAqB;;sEAEpC,uNAAC,iQAAA,CAAA,oBAAiB;4DAAC,WAAU;4DAAc,eAAY;;;;;;wDAAS;;;;;;;8DAGlE,uNAAC,+JAAA,CAAA,SAAM;oDACL,MAAK;oDACL,SAAS,IAAM;oDACf,WAAU;oDACV,UAAU,CAAC,MAAM,IAAI;8DACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAQT,uNAAC;wBACC,eAAe;wBACf,UAAU;wBACV,UAAU,CAAC,KAAO,YAAY;wBAC9B,UAAU,CAAC,IAAI,QACb,iBAAiB,CAAC,OAChB,KAAK,GAAG,CAAC,CAAC,IAAO,EAAE,EAAE,KAAK,KAAK;wCAAE,GAAG,CAAC;wCAAE;wCAAO,aAAa;oCAAM,IAAI;wBAGzE,UAAU,CAAC;4BACT,iBAAiB,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;4BACvD,IAAI,aAAa,IAAI;gCACnB,MAAM,OAAO,cAAc,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;gCAChD,YAAY,MAAM,MAAM;4BAC1B;wBACF;;;;;;;;;;;;;;;;;;AAKV;GAjhBwB;KAAA;AAmhBxB,SAAS,WAAW,EAClB,IAAI,EACJ,OAAO,EACP,SAAS,EAKV;IACC,MAAM,SAAS,SAAS;IACxB,MAAM,gBAAgB,CAAA,GAAA,gJAAA,CAAA,KAAE,AAAD,EACrB,0EACA,SAAS,uCAAuC,SAAS,WAAW,mCAAmC;IAEzG,MAAM,aAAa,CAAA,GAAA,gJAAA,CAAA,KAAE,AAAD,EAAE,eAAe,SAAS,gBAAgB;IAE9D,qBACE,uNAAC;QAAI,WAAW;kBACd,cAAA,uNAAC;YAAI,WAAU;;8BACb,uNAAC;oBAAI,WAAW;oBAAe,MAAK;oBAAU,aAAU;8BACtD,cAAA,uNAAC;wBAAE,WAAU;kCAA+C;;;;;;;;;;;8BAE9D,uNAAC;oBAAK,WAAU;8BACb,IAAI,KAAK,WAAW,kBAAkB,CAAC,EAAE,EAAE;wBAAE,MAAM;wBAAW,QAAQ;oBAAU;;;;;;;;;;;;;;;;;AAK3F;MA5BS;AA8BT,SAAS;IACP,qBACE,uNAAC;QAAI,WAAU;kBACb,cAAA,uNAAC;YAAI,WAAU;;8BACb,uNAAC;oBAAK,WAAU;8BAAU;;;;;;8BAC1B,uNAAC;oBAAI,WAAU;;sCACb,uNAAC;;;;;sCACD,uNAAC;4BAAI,OAAM;;;;;;sCACX,uNAAC;4BAAI,OAAM;;;;;;;;;;;;;;;;;;;;;;;AAKrB;MAbS;AAeT,SAAS,IAAI,EAAE,QAAQ,KAAK,EAAsB;IAChD,qBACE,uNAAC;QACC,WAAU;QACV,OAAO;YAAE,gBAAgB;QAAM;QAC/B,eAAY;;;;;;AAGlB;MARS;AAUT,SAAS,iBAAiB,EACxB,aAAa,EACb,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EAOT;IACC,qBACE,uNAAC;QAAI,WAAU;;0BACb,uNAAC;gBAAI,WAAU;0BACb,cAAA,uNAAC;oBAAI,WAAU;;sCACb,uNAAC,iOAAA,CAAA,QAAK;4BAAC,WAAU;4BAA+B,eAAY;;;;;;sCAC5D,uNAAC;4BAAK,WAAU;sCAAgC;;;;;;;;;;;;;;;;;0BAGpD,uNAAC;gBAAI,WAAU;0BACZ,cAAc,GAAG,CAAC,CAAC,kBAClB,uNAAC;wBAEC,SAAS,IAAM,SAAS,EAAE,EAAE;wBAC5B,WAAW,CAAA,GAAA,gJAAA,CAAA,KAAE,AAAD,EACV,2EACA,4CACA,EAAE,EAAE,KAAK,WAAW,6BAA6B;wBAEnD,gBAAc,EAAE,EAAE,KAAK,WAAW,SAAS;;0CAE3C,uNAAC;gCAAI,WAAU;0CAA8C,EAAE,KAAK;;;;;;0CACpE,uNAAC;gCAAI,WAAU;0CACZ,IAAI,KAAK,EAAE,WAAW,EAAE,kBAAkB,CAAC,EAAE,EAAE;oCAAE,OAAO;oCAAS,KAAK;gCAAU;;;;;;0CAEnF,uNAAC;gCAAI,WAAU;;kDACb,uNAAC;wCACC,OAAM;wCACN,SAAS,CAAC;4CACR,EAAE,eAAe;4CACjB,MAAM,OAAO,OAAO,uBAAuB,EAAE,KAAK;4CAClD,IAAI,QAAQ,KAAK,IAAI,IAAI,SAAS,EAAE,EAAE,EAAE,KAAK,IAAI;wCACnD;kDAEA,cAAA,uNAAC,qPAAA,CAAA,gBAAa;4CAAC,WAAU;4CAAW,eAAY;;;;;;;;;;;kDAElD,uNAAC;wCACC,OAAM;wCACN,SAAS,CAAC;4CACR,EAAE,eAAe;4CACjB,IAAI,QAAQ,8BAA8B,SAAS,EAAE,EAAE;wCACzD;kDAEA,cAAA,uNAAC,+PAAA,CAAA,mBAAgB;4CAAC,WAAU;4CAAW,eAAY;;;;;;;;;;;;;;;;;;uBA/BlD,EAAE,EAAE;;;;;;;;;;;;;;;;AAuCrB;MA/DS;AAiET,SAAS,aAAa,EACpB,KAAK,EACL,OAAO,EACP,QAAQ,EAKT;IACC,qBACE,uNAAC;QACC,MAAK;QACL,SAAS;QACT,WAAU;QACV,cAAY;QACZ,OAAO;;YAEN;0BACD,uNAAC;0BAAM;;;;;;;;;;;;AAGb;MArBS","debugId":null}}]
}