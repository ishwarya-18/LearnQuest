{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/documents/LearnQuest/frontend/src/components/AITutorAssistant.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport { toast } from \"sonner\"\nimport {\n  Speech,\n  MessageSquare,\n  Brain,\n  Languages,\n  GraduationCap,\n  MessageCircleMore,\n  MessageCirclePlus,\n  MessageSquareText,\n  CircleQuestionMark,\n  MessageCircleOff,\n} from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n\n  \n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n\ntype MessageRole = \"assistant\" | \"user\" | \"system\"\ntype Message = {\n  id: string\n  role: MessageRole\n  content: string\n  timestamp: number\n  language: string\n  meta?: {\n    tts?: boolean\n    topic?: string\n  }\n}\n\ntype ProgressData = {\n  weakAreas?: string[]\n  strengths?: string[]\n  recentScores?: Record<string, number>\n  level?: \"beginner\" | \"intermediate\" | \"advanced\"\n}\n\ntype Conversation = {\n  id: string\n  title: string\n  lastUpdated: number\n  language: string\n  messages: Message[]\n}\n\nexport type AITutorAssistantProps = {\n  className?: string\n  studentName?: string\n  locale?: string\n  initialLanguage?: string\n  progress?: ProgressData\n  presetTopics?: { id: string; label: string; prompt: string; icon?: \"coach\" | \"emergency\" | \"practice\" | \"concept\" }[]\n  onSendMessage?: (message: Message, conversation: Conversation) => void\n  onNewConversation?: (conversation: Conversation) => void\n  ttsEnabledByDefault?: boolean\n}\n\nconst STORAGE_KEY = \"learnquest.aiTutor.conversations.v1\"\nconst ACTIVE_KEY = \"learnquest.aiTutor.activeId.v1\"\n\nconst DEFAULT_PRESETS: AITutorAssistantProps[\"presetTopics\"] = [\n  { id: \"concept-help\", label: \"Explain a concept\", prompt: \"Explain like I'm 12: \", icon: \"concept\" },\n  { id: \"targeted-practice\", label: \"Targeted practice\", prompt: \"Give me 5 practice questions on: \", icon: \"practice\" },\n  { id: \"motivation\", label: \"Motivation boost\", prompt: \"I need motivation about studying: \", icon: \"coach\" },\n  { id: \"exam-crisis\", label: \"Emergency study help\", prompt: \"I have a test soon. Help me quickly with: \", icon: \"emergency\" },\n]\n\nconst LANG_OPTIONS = [\n  { value: \"en\", label: \"English\" },\n  { value: \"hi\", label: \"हिन्दी\" },\n  { value: \"bn\", label: \"বাংলা\" },\n  { value: \"te\", label: \"తెలుగు\" },\n  { value: \"ta\", label: \"தமிழ்\" },\n  { value: \"mr\", label: \"मराठी\" },\n  { value: \"kn\", label: \"ಕನ್ನಡ\" },\n  { value: \"pa\", label: \"ਪੰਜਾਬੀ\" },\n  { value: \"gu\", label: \"ગુજરાતી\" },\n  { value: \"ur\", label: \"اردو\" },\n]\n\nfunction generateId(prefix = \"msg\") {\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\n    return `${prefix}_${crypto.randomUUID()}`\n  }\n  return `${prefix}_${Math.random().toString(36).slice(2, 10)}_${Date.now().toString(36)}`\n}\n\nfunction now() {\n  return Date.now()\n}\n\nfunction safeLocalStorageGet<T>(key: string, fallback: T): T {\n  if (typeof window === \"undefined\") return fallback\n  try {\n    const raw = window.localStorage.getItem(key)\n    return raw ? (JSON.parse(raw) as T) : fallback\n  } catch {\n    return fallback\n  }\n}\n\nfunction safeLocalStorageSet<T>(key: string, value: T) {\n  if (typeof window === \"undefined\") return\n  try {\n    window.localStorage.setItem(key, JSON.stringify(value))\n  } catch {\n    // ignore\n  }\n}\n\nfunction speak(text: string, lang: string) {\n  if (typeof window === \"undefined\") return\n  const synth = window.speechSynthesis\n  if (!synth) return\n  const utter = new SpeechSynthesisUtterance(text)\n  utter.lang = lang\n  // Attempt to pick a matching voice\n  const voices = synth.getVoices()\n  const match = voices.find((v) => v.lang?.toLowerCase().startsWith(lang.toLowerCase()))\n  if (match) utter.voice = match\n  synth.speak(utter)\n}\n\nfunction stopSpeaking() {\n  if (typeof window === \"undefined\") return\n  const synth = window.speechSynthesis\n  if (synth && synth.speaking) synth.cancel()\n}\n\n// Very lightweight mock \"AI\" to simulate helpful responses and adaptive questioning without calling APIs.\nfunction mockTutorResponse(input: string, context: { progress?: ProgressData; language: string }): { text: string; followUps: string[] } {\n  const weak = context.progress?.weakAreas ?? []\n  const level = context.progress?.level ?? \"beginner\"\n  const lower = input.toLowerCase()\n  let base = \"\"\n\n  if (lower.includes(\"motivation\") || lower.includes(\"motivate\")) {\n    base =\n      \"You've got this! Let's set a tiny goal for the next 10 minutes. Pick one small topic and I'll guide you. Small steps build big progress.\"\n  } else if (lower.includes(\"test\") || lower.includes(\"exam\") || lower.includes(\"emergency\")) {\n    base =\n      \"Okay, rapid support mode. We'll prioritize high-yield points and a quick check of your understanding. Tell me the exact topic and the test date.\"\n  } else if (lower.includes(\"practice\")) {\n    base =\n      \"Here's a short, focused practice set. Try each question out loud first. I’ll adapt difficulty based on your answers.\"\n  } else if (weak.some((w) => lower.includes(w.toLowerCase()))) {\n    base =\n      \"I see this is one of your growth areas. Let's break it down with a simple example and then build up gradually.\"\n  } else {\n    base =\n      \"Great question. I’ll explain clearly with a real-world example, then we’ll try a quick check to confirm your understanding.\"\n  }\n\n  const followUps = [\n    \"Can you explain this concept back to me in your own words?\",\n    \"Would you like 3 practice questions on this?\",\n    `Should we review a weak area next${weak.length ? ` (e.g., ${weak[0]})` : \"\"}?`,\n  ]\n\n  if (level !== \"advanced\") {\n    followUps.push(\"Want a simpler analogy?\")\n  } else {\n    followUps.push(\"Want a deeper, exam-style explanation?\")\n  }\n\n  return { text: base, followUps }\n}\n\nexport default function AITutorAssistant({\n  className,\n  studentName = \"Student\",\n  initialLanguage = \"en\",\n  progress,\n  presetTopics = DEFAULT_PRESETS,\n  onSendMessage,\n  onNewConversation,\n  ttsEnabledByDefault = true,\n}: AITutorAssistantProps) {\n  const [conversations, setConversations] = useState<Conversation[]>(() =>\n    safeLocalStorageGet<Conversation[]>(STORAGE_KEY, [])\n  )\n  const [activeId, setActiveId] = useState<string | null>(() =>\n    safeLocalStorageGet<string | null>(ACTIVE_KEY, null)\n  )\n  const [input, setInput] = useState(\"\")\n  const [language, setLanguage] = useState(initialLanguage)\n  const [listening, setListening] = useState(false)\n  const [ttsEnabled, setTtsEnabled] = useState(ttsEnabledByDefault)\n  const [typing, setTyping] = useState(false)\n  const [online, setOnline] = useState<boolean>(true)\n  const [pendingQueue, setPendingQueue] = useState<Message[]>([])\n\n  const recognitionRef = useRef<any | null>(null)\n  const scrollRef = useRef<HTMLDivElement | null>(null)\n\n  const activeConversation = useMemo<Conversation | null>(() => {\n    const found = conversations.find((c) => c.id === activeId)\n    return found ?? null\n  }, [conversations, activeId])\n\n  const messages = activeConversation?.messages ?? []\n\n  // Persistence\n  useEffect(() => {\n    safeLocalStorageSet(STORAGE_KEY, conversations)\n  }, [conversations])\n\n  useEffect(() => {\n    safeLocalStorageSet(ACTIVE_KEY, activeId)\n  }, [activeId])\n\n  // Online/offline detection\n  useEffect(() => {\n    if (typeof window === \"undefined\") return\n    const handleOnline = () => {\n      setOnline(true)\n      if (pendingQueue.length) {\n        toast.success(\"Reconnected. Syncing messages...\")\n        // Simulate syncing by appending a system note\n        const syncNote: Message = {\n          id: generateId(\"sys\"),\n          role: \"system\",\n          content: `Synced ${pendingQueue.length} message(s)`,\n          timestamp: now(),\n          language,\n        }\n        if (activeConversation) {\n          setConversations((prev) =>\n            prev.map((c) =>\n              c.id === activeConversation.id\n                ? { ...c, messages: [...c.messages, syncNote], lastUpdated: now() }\n                : c\n            )\n          )\n        }\n        setPendingQueue([])\n      } else {\n        toast.success(\"Back online\")\n      }\n    }\n    const handleOffline = () => {\n      setOnline(false)\n      toast.message(\"Offline mode\", {\n        description: \"You can continue. Messages will sync when reconnected.\",\n      })\n    }\n    setOnline(navigator.onLine)\n    window.addEventListener(\"online\", handleOnline)\n    window.addEventListener(\"offline\", handleOffline)\n    return () => {\n      window.removeEventListener(\"online\", handleOnline)\n      window.removeEventListener(\"offline\", handleOffline)\n    }\n  }, [pendingQueue.length, activeConversation, language])\n\n  // Init speech recognition\n  useEffect(() => {\n    if (typeof window === \"undefined\") return\n    const SR: any = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition\n    if (!SR) return\n    const recognizer = new SR()\n    recognizer.lang = language\n    recognizer.continuous = false\n    recognizer.interimResults = true\n\n   recognizer.onresult = (event: any) => {\n  let interim = \"\";\n  let final = \"\";\n  for (let i = event.resultIndex; i < event.results.length; i++) {\n    const transcript = event.results[i][0].transcript;\n    if (event.results[i].isFinal) {\n      final += transcript;\n    } else {\n      interim += transcript;\n    }\n  }\n  // Append to existing input for continuous dictation\n  setInput((prev) => (prev + \" \" + final + interim).trim());\n}\n    recognizer.onerror = () => {\n      setListening(false)\n      toast.error(\"Voice input error\")\n    }\n    recognizer.onend = () => {\n      setListening(false)\n    }\n    recognitionRef.current = recognizer\n  }, [language])\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    const el = scrollRef.current\n    if (!el) return\n    el.scrollTop = el.scrollHeight\n  }, [messages.length, typing])\n\n  // Speak assistant messages when TTS enabled\n  useEffect(() => {\n    if (!ttsEnabled) {\n      stopSpeaking()\n      return\n    }\n    if (!messages.length) return\n    const last = messages[messages.length - 1]\n    if (last.role === \"assistant\") {\n      speak(last.content, last.language || language)\n    }\n  }, [messages, ttsEnabled, language])\n\n  const startNewConversation = useCallback(\n    (lang: string) => {\n      const conv: Conversation = {\n        id: generateId(\"conv\"),\n        title: `Session with ${studentName}`,\n        lastUpdated: now(),\n        language: lang,\n        messages: [\n          {\n            id: generateId(\"msg\"),\n            role: \"assistant\",\n            content: `Hi ${studentName}! I’m your AI Tutor. How can I help you today? You can type or use the mic button.`,\n            timestamp: now(),\n            language: lang,\n          },\n        ],\n      }\n      setConversations((prev) => [conv, ...prev])\n      setActiveId(conv.id)\n      onNewConversation?.(conv)\n    },\n    [onNewConversation, studentName]\n  )\n\n  useEffect(() => {\n    if (!conversations.length) {\n      startNewConversation(language)\n    } else if (!activeId) {\n      setActiveId(conversations[0].id)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleSend = useCallback(\n    async (text?: string) => {\n      const content = (text ?? input).trim()\n      if (!content) return\n      let convId = activeConversation?.id ?? conversations[0]?.id;\nif (!convId) {\n  // Start a new conversation and get its ID\n  const newConv: Conversation = {\n    id: generateId(\"conv\"),\n    title: `Session with ${studentName}`,\n    lastUpdated: now(),\n    language,\n    messages: [],\n  };\n  setConversations((prev) => [newConv, ...prev]);\n  setActiveId(newConv.id);\n  convId = newConv.id;\n}\n\nconst userMsg: Message = {\n  id: generateId(\"msg\"),\n  role: \"user\",\n  content,\n  timestamp: now(),\n  language,\n};\n\n// Add the user message immediately\nsetConversations((prev) =>\n  prev.map((c) =>\n    c.id === convId ? { ...c, messages: [...c.messages, userMsg], lastUpdated: now() } : c\n  )\n);\nonSendMessage?.(userMsg, (conversations.find((c) => c.id === convId) as Conversation) ?? activeConversation!);\n\nsetInput(\"\");\nsetTyping(true);\n\n// ...rest of code...\n\n    \n\n      const proceed = () => {\n        const result = mockTutorResponse(content, { progress, language })\n        const assistantMsg: Message = {\n          id: generateId(\"msg\"),\n          role: \"assistant\",\n          content: `${result.text}\\n\\n• ${result.followUps.join(\"\\n• \")}`,\n          timestamp: now(),\n          language,\n        }\n        setConversations((prev) =>\n          prev.map((c) =>\n            c.id === convId\n              ? { ...c, messages: [...c.messages, assistantMsg], lastUpdated: now() }\n              : c\n          )\n        )\n        setTyping(false)\n      }\n\n      if (!online) {\n        // Cache locally and queue for sync\n        setPendingQueue((q) => [...q, userMsg])\n        const offlineNote: Message = {\n          id: generateId(\"sys\"),\n          role: \"system\",\n          content: \"Saved offline. I’ll respond when reconnected.\",\n          timestamp: now(),\n          language,\n        }\n        setConversations((prev) =>\n          prev.map((c) =>\n            c.id === convId ? { ...c, messages: [...c.messages, offlineNote], lastUpdated: now() } : c\n          )\n        )\n        setTyping(false)\n        return\n      }\n\n      // Simulate network/AI latency\n      setTimeout(proceed, 650)\n    },\n    [activeConversation, conversations, input, language, onSendMessage, online, progress, startNewConversation]\n  )\n\n  const handlePreset = useCallback(\n    (preset: NonNullable<AITutorAssistantProps[\"presetTopics\"]>[number]) => {\n      setInput(preset.prompt)\n      toast.message(\"Preset loaded\", { description: preset.label })\n    },\n    []\n  )\n\n  const handleVoiceToggle = useCallback(() => {\n    if (!recognitionRef.current) {\n      toast.error(\"Voice input not supported on this device\")\n      return\n    }\n    if (listening) {\n      recognitionRef.current.stop()\n      setListening(false)\n    } else {\n      try {\n        recognitionRef.current.lang = language\n        recognitionRef.current.start()\n        setListening(true)\n      } catch {\n        setListening(false)\n        toast.error(\"Unable to start voice input\")\n      }\n    }\n  }, [language, listening])\n\n  const quickSuggestions = useMemo(() => {\n    const items: { label: string; text: string }[] = []\n    if (progress?.weakAreas?.length) {\n      items.push({\n        label: \"Review weak area\",\n        text: `Help me with ${progress.weakAreas[0]}`,\n      })\n    }\n    if (progress?.recentScores) {\n      const lowest = Object.entries(progress.recentScores).sort((a, b) => a[1] - b[1])[0]\n      if (lowest) {\n        items.push({\n          label: \"Practice low score\",\n          text: `Give me practice for ${lowest[0]}`,\n        })\n      }\n    }\n    items.push(\n      { label: \"Explain simply\", text: \"Explain this simply with an example\" },\n      { label: \"Give 3 questions\", text: \"Give me 3 practice questions\" }\n    )\n    return items.slice(0, 4)\n  }, [progress])\n\n  const LanguageIcon = Languages\n  const EmergencyIcon = MessageCircleOff\n  const CoachIcon = MessageCircleMore\n  const PracticeIcon = MessageSquareText\n  const ConceptIcon = CircleQuestionMark\n\n  return (\n    <Card className={cn(\"w-full bg-card border-border\", className)}>\n      <CardHeader className=\"gap-2\">\n        <div className=\"flex items-center justify-between gap-3\">\n          <div className=\"flex items-center gap-3 min-w-0\">\n            <div className=\"size-10 rounded-full bg-accent flex items-center justify-center\">\n              <GraduationCap className=\"size-5 text-foreground\" aria-hidden=\"true\" />\n            </div>\n            <div className=\"min-w-0\">\n              <CardTitle className=\"text-base sm:text-lg truncate\">\n                AI Tutor Assistant\n              </CardTitle>\n              <CardDescription className=\"text-xs sm:text-sm\">\n                Personalized help for {studentName}\n              </CardDescription>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge\n              variant=\"outline\"\n              className={cn(\n                \"rounded-full px-2 py-1 text-xs\",\n                online ? \"bg-accent text-foreground border-transparent\" : \"bg-muted text-muted-foreground\"\n              )}\n              aria-live=\"polite\"\n            >\n              {online ? \"Online\" : \"Offline\"}\n            </Badge>\n\n            <div className=\"hidden sm:flex items-center gap-2\">\n              <Label htmlFor=\"tts\" className=\"text-xs text-muted-foreground\">\n                Read aloud\n              </Label>\n              <Switch\n                id=\"tts\"\n                checked={ttsEnabled}\n                onCheckedChange={(v) => setTtsEnabled(v)}\n                aria-label=\"Toggle text-to-speech\"\n              />\n            </div>\n\n            <Select\n              value={language}\n              onValueChange={(v) => {\n                setLanguage(v)\n                toast.message(\"Language switched\", { description: LANG_OPTIONS.find((x) => x.value === v)?.label })\n              }}\n            >\n              <SelectTrigger className=\"w-[120px] h-9 bg-secondary border-input\">\n                <LanguageIcon className=\"mr-2 size-4\" aria-hidden=\"true\" />\n                <SelectValue placeholder=\"Language\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-popover\">\n                {LANG_OPTIONS.map((opt) => (\n                  <SelectItem key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {!online && (\n          <div className=\"text-xs text-muted-foreground bg-muted/60 rounded-md px-3 py-2\">\n            You’re offline. Messages will be saved and synced automatically when you reconnect.\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          {presetTopics?.map((p) => {\n            const IconComp =\n              p.icon === \"emergency\"\n                ? EmergencyIcon\n                : p.icon === \"coach\"\n                ? CoachIcon\n                : p.icon === \"practice\"\n                ? PracticeIcon\n                : ConceptIcon\n            return (\n              <Button\n                key={p.id}\n                variant=\"secondary\"\n                className=\"h-8 rounded-full bg-secondary text-foreground hover:bg-accent\"\n                onClick={() => handlePreset(p)}\n              >\n                <IconComp className=\"size-4 mr-2\" aria-hidden=\"true\" />\n                <span className=\"text-xs\">{p.label}</span>\n              </Button>\n            )\n          })}\n        </div>\n\n        <Separator className=\"bg-border\" />\n\n        <div\n          className=\"relative rounded-xl bg-secondary p-2\"\n          role=\"region\"\n          aria-label=\"Chat conversation\"\n        >\n          <ScrollArea className=\"h-[360px] sm:h-[420px]\">\n            <div ref={scrollRef} className=\"px-1 py-2 space-y-3 min-w-0\">\n              {messages.map((m) => (\n                <ChatBubble key={m.id} role={m.role} content={m.content} timestamp={m.timestamp} />\n              ))}\n              {typing && <TypingIndicator />}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {quickSuggestions.length > 0 && (\n          <div className=\"flex flex-wrap items-center gap-2\">\n            {quickSuggestions.map((q, idx) => (\n              <Button\n                key={`${q.label}-${idx}`}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 rounded-full bg-accent hover:bg-accent/80 text-foreground\"\n                onClick={() => handleSend(q.text)}\n              >\n                <Brain className=\"size-4 mr-2\" aria-hidden=\"true\" />\n                <span className=\"text-xs\">{q.label}</span>\n              </Button>\n            ))}\n          </div>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col gap-3\">\n        <div className=\"flex items-end gap-2 w-full\">\n          <div className=\"flex-1 min-w-0\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Type your question... or use the mic\"\n              className=\"bg-card border-input focus-visible:ring-ring min-h-[56px] resize-none\"\n              rows={3}\n              onKeyDown={(e) => {\n                if ((e.metaKey || e.ctrlKey) && e.key === \"Enter\") {\n                  e.preventDefault()\n                  handleSend()\n                }\n              }}\n              aria-label=\"Message input\"\n            />\n            <div className=\"flex items-center justify-between mt-2\">\n              <div className=\"flex items-center gap-2\">\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        type=\"button\"\n                        variant={listening ? \"default\" : \"secondary\"}\n                        onClick={handleVoiceToggle}\n                        className={cn(\n                          \"h-9 rounded-full\",\n                          listening ? \"bg-primary text-primary-foreground\" : \"bg-secondary\"\n                        )}\n                        aria-pressed={listening}\n                        aria-label={listening ? \"Stop voice input\" : \"Start voice input\"}\n                      >\n                        <Speech className=\"size-4 mr-2\" aria-hidden=\"true\" />\n                        {listening ? \"Listening...\" : \"Voice\"}\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Speak your question</TooltipContent>\n                  </Tooltip>\n\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        type=\"button\"\n                        variant={ttsEnabled ? \"default\" : \"secondary\"}\n                        onClick={() => setTtsEnabled((v) => !v)}\n                        className=\"h-9 rounded-full\"\n                        aria-pressed={ttsEnabled}\n                        aria-label=\"Toggle read aloud\"\n                      >\n                        <MessageSquare className=\"size-4 mr-2\" aria-hidden=\"true\" />\n                        {ttsEnabled ? \"Read aloud: On\" : \"Read aloud: Off\"}\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Toggle text-to-speech for tutor replies</TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"h-9 rounded-full\"\n                  onClick={() => startNewConversation(language)}\n                >\n                  <MessageCirclePlus className=\"size-4 mr-2\" aria-hidden=\"true\" />\n                  New\n                </Button>\n                <Button\n                  type=\"button\"\n                  onClick={() => handleSend()}\n                  className=\"h-9 rounded-full\"\n                  disabled={!input.trim()}\n                >\n                  Send\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <ConversationTray\n          conversations={conversations}\n          activeId={activeId}\n          onSelect={(id) => setActiveId(id)}\n          onRename={(id, title) =>\n            setConversations((prev) =>\n              prev.map((c) => (c.id === id ? { ...c, title, lastUpdated: now() } : c))\n            )\n          }\n          onDelete={(id) => {\n            setConversations((prev) => prev.filter((c) => c.id !== id))\n            if (activeId === id) {\n              const next = conversations.find((c) => c.id !== id)\n              setActiveId(next?.id ?? null)\n            }\n          }}\n        />\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction ChatBubble({\n  role,\n  content,\n  timestamp,\n}: {\n  role: MessageRole\n  content: string\n  timestamp: number\n}) {\n  const isUser = role === \"user\"\n  const bubbleClasses = cn(\n    \"max-w-[85%] sm:max-w-[70%] rounded-2xl px-4 py-3 shadow-sm break-words\",\n   isUser ? \"bg-secondary text-foreground\" : role === \"system\" ? \"bg-muted text-muted-foreground\" : \"bg-card text-foreground\"\n  )\n  const rowClasses = cn(\"w-full flex\", isUser ? \"justify-end\" : \"justify-start\")\n\n  return (\n    <div className={rowClasses}>\n      <div className=\"flex flex-col gap-1\">\n        <div className={bubbleClasses} role=\"article\" aria-live=\"polite\">\n        <p className=\"text-sm leading-relaxed whitespace-pre-line\">{content}</p>\n        </div>\n        <span className=\"text-[11px] text-muted-foreground pl-2\">\n          {new Date(timestamp).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nfunction TypingIndicator() {\n  return (\n    <div className=\"w-full flex justify-start\">\n      <div className=\"bg-card text-foreground rounded-2xl px-4 py-3 shadow-sm inline-flex items-center gap-2\">\n        <span className=\"sr-only\">Tutor is typing</span>\n        <div className=\"flex items-center gap-1\">\n          <Dot />\n          <Dot delay=\"150ms\" />\n          <Dot delay=\"300ms\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction Dot({ delay = \"0ms\" }: { delay?: string }) {\n  return (\n    <span\n      className=\"inline-block size-2 rounded-full bg-muted-foreground/60 animate-bounce\"\n      style={{ animationDelay: delay }}\n      aria-hidden=\"true\"\n    />\n  )\n}\n\nfunction ConversationTray({\n  conversations,\n  activeId,\n  onSelect,\n  onRename,\n  onDelete,\n}: {\n  conversations: Conversation[]\n  activeId: string | null\n  onSelect: (id: string) => void\n  onRename: (id: string, title: string) => void\n  onDelete: (id: string) => void\n}) {\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center gap-2\">\n          <Brain className=\"size-4 text-muted-foreground\" aria-hidden=\"true\" />\n          <span className=\"text-sm text-muted-foreground\">Conversation history</span>\n        </div>\n      </div>\n      <div className=\"flex gap-2 overflow-x-auto py-1\">\n        {conversations.map((c) => (\n          <button\n            key={c.id}\n            onClick={() => onSelect(c.id)}\n            className={cn(\n              \"group shrink-0 text-left rounded-lg border px-3 py-2 bg-card transition\",\n              \"hover:bg-accent hover:border-transparent\",\n              c.id === activeId ? \"border-primary bg-accent\" : \"border-input\"\n            )}\n            aria-current={c.id === activeId ? \"true\" : \"false\"}\n          >\n            <div className=\"text-sm font-medium truncate max-w-[180px]\">{c.title}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {new Date(c.lastUpdated).toLocaleDateString([], { month: \"short\", day: \"numeric\" })}\n            </div>\n            <div className=\"flex items-center gap-2 mt-2 opacity-0 group-hover:opacity-100 transition\">\n              <InlineAction\n                label=\"Rename\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  const next = prompt(\"Rename conversation\", c.title)\n                  if (next && next.trim()) onRename(c.id, next.trim())\n                }}\n              >\n                <MessageSquare className=\"size-3.5\" aria-hidden=\"true\" />\n              </InlineAction>\n              <InlineAction\n                label=\"Delete\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  if (confirm(\"Delete this conversation?\")) onDelete(c.id)\n                }}\n              >\n                <MessageCircleOff className=\"size-3.5\" aria-hidden=\"true\" />\n              </InlineAction>\n            </div>\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nfunction InlineAction({\n  label,\n  onClick,\n  children,\n}: {\n  label: string\n  onClick: (e: React.MouseEvent) => void\n  children: React.ReactNode\n}) {\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"text-xs px-2 py-1 rounded-full bg-secondary hover:bg-accent inline-flex items-center gap-1\"\n      aria-label={label}\n      title={label}\n    >\n      {children}\n      <span>{label}</span>\n    </button>\n  )\n}"],"names":[],"mappings":"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","debugId":null}}]
}